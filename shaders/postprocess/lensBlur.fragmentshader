uniform sampler2D source_image;
uniform vec3 texel_radius;

in vec2 TexCoord;
out vec4 FragColor;

#define LENS_FORM_HEXAGONAL		(r - 0.5 * x)
#define LENS_FORM_OCTAGONAL		(r - max(0.0, x - 0.4 * r))
#define LENS_FORM_CIRCLE 		sqrt(r_square - x_square)

#define LENS_DISTRIBUTION_LINEAR(t) 	1
#define LENS_DISTRIBUTION_1(t) 		t
#define LENS_DISTRIBUTION_2(t) 		(1.0 - t)
#define LENS_DISTRIBUTION_3(t) 		(0.5 + 0.5 * sqrt(t))
#define LENS_DISTRIBUTION_5(t) 		pow( max(0.0, 1.0 - t), 0.01 )
#define LENS_DISTRIBUTION_X(t) 		(0.75 + 0.25 * t * t)

#define LENS_DISTRIBUTION(t) 		LENS_DISTRIBUTION_5(t)
#define LENS_FORM 			LENS_FORM_HEXAGONAL

void main()
{
 float tex_u = texel_radius.x;
 float tex_v = texel_radius.x;
 float r = texel_radius.z;

#ifdef LENS_DISTRIBUTION
 float r_square = r * r;
 float scale = LENS_DISTRIBUTION(0.0);
 vec3 value = texture(source_image, TexCoord).xyz * scale;
#else
 vec3 value = texture(source_image, TexCoord).xyz;
 float scale = 1.0 + 4.0 * (r - 1.0);
#endif

 for (float dt = 1.0; dt <= r; dt += 1.0)
 { 
  float du = tex_u * dt;
  float dv = tex_v * dt;

#ifdef LENS_DISTRIBUTION

  float ndt = dt * dt / r_square;
  float dist = LENS_DISTRIBUTION(ndt);
  scale += 4.0 * dist;
  value += dist * (texture(source_image, TexCoord + vec2( du, 0.0)).xyz +
		   texture(source_image, TexCoord + vec2(-du, 0.0)).xyz +
		   texture(source_image, TexCoord + vec2(0.0,  dv)).xyz + 
		   texture(source_image, TexCoord + vec2(0.0, -dv)).xyz);

#else

  value += texture(source_image, TexCoord + vec2( du, 0.0)).xyz +
	   texture(source_image, TexCoord + vec2(-du, 0.0)).xyz +
	   texture(source_image, TexCoord + vec2(0.0,  dv)).xyz + 
	   texture(source_image, TexCoord + vec2(0.0, -dv)).xyz;

#endif
 }

 for (float x = 1.0; x <= r; x += 1.0)
 {
  float du = tex_u * x;
  float s = LENS_FORM;

#ifdef LENS_DISTRIBUTION
  float x_square = x * x;
#else
  scale += 4.0 * s;
#endif

  for (float y = 1; y <= s; y += 1.0)
  {
   float dv = tex_v * y;

#ifdef LENS_DISTRIBUTION

   float val = (x_square + y * y) / r_square;
   float dist = LENS_DISTRIBUTION(val);
   scale += 4.0 * dist;
   value += dist * (texture(source_image, TexCoord + vec2( du,  dv)).xyz +
   		    texture(source_image, TexCoord + vec2(-du,  dv)).xyz +
		    texture(source_image, TexCoord + vec2( du, -dv)).xyz +
		    texture(source_image, TexCoord + vec2(-du, -dv)).xyz );

#else

   value += texture(source_image, TexCoord + vec2( du,  dv)).xyz +
   	    texture(source_image, TexCoord + vec2(-du,  dv)).xyz +
	    texture(source_image, TexCoord + vec2( du, -dv)).xyz +
            texture(source_image, TexCoord + vec2(-du, -dv)).xyz;

#endif

  }
 }

 FragColor = vec4(value.xyz / scale, 1.0);
}