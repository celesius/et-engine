uniform mat4 mModelViewProjection;
uniform vec3 vCamera;
uniform vec3 vPrimaryLight;
uniform mat4 mTransform;

attribute vec4 Vertex;
attribute vec3 Normal;
attribute vec2 TexCoord0;
attribute vec3 Tangent;

varying vec2 TexCoord;
varying vec3 vViewTS;
varying vec3 vLightTS;
varying vec3 vViewWS;
varying vec3 vLightWS;
varying vec3 vNormalWS;

void main()
{
 mat3 mTransform3 = mat3(mTransform);
 vec4 transVertex = mTransform * Vertex;

 vNormalWS = mTransform3 * Normal;
 vec3 aTangent = mTransform3 * Tangent;
 vec3 aBinormal = cross(aTangent, vNormalWS);

 vLightWS = vPrimaryLight - transVertex.xyz;
 vLightTS.x = dot(vLightWS, aTangent);
 vLightTS.y = dot(vLightWS, aBinormal);
 vLightTS.z = dot(vLightWS, vNormalWS);

 vViewWS = vCamera - transVertex.xyz;
 vViewTS.x = dot(vViewWS, aTangent);
 vViewTS.y = dot(vViewWS, aBinormal);
 vViewTS.z = dot(vViewWS, vNormalWS);

 TexCoord  = TexCoord0;
 gl_Position = mModelViewProjection * transVertex;
}