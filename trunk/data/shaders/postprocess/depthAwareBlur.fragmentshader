#include <include\getLinearDistance.h>

uniform sampler2D source_image;
uniform sampler2D depth_image;
uniform vec2 clip_plane;
uniform vec3 texel_radius;

in vec2 TexCoord;
out vec4 FragColor;

float slope(float c, float d)
{
 float diff = 0.75 * abs(c - d);
 return min(1.0, 1.0 / (1.0e-5 + diff) );
}

void main()
{
 float radius = texel_radius.z;
 float totalScale = 1.0 + radius;

 float centralDepth = getLinearDistance( texture(depth_image, TexCoord).x, clip_plane );
 vec4 value = texture(source_image, TexCoord) * totalScale;
 
 float x = 1.0;
 while (x <= radius)
 {
  float scale = 1.0 + radius - x;
  vec2 dudv = texel_radius.xy * x;

  float leftDepth = getLinearDistance( texture(depth_image, TexCoord - dudv).x, clip_plane );
  float rightDepth = getLinearDistance( texture(depth_image, TexCoord + dudv).x, clip_plane );

  float leftScale = slope(centralDepth, leftDepth);
  float rightScale = slope(centralDepth, rightDepth);

  value += scale * ( leftScale  * texture(source_image, TexCoord - dudv) +
                     rightScale * texture(source_image, TexCoord + dudv) );

  totalScale += (leftScale + rightScale) * scale;
  x += 1.0;
 }

 FragColor = value / totalScale;
}