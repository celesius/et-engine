#version 150
precision highp float;

#include "planet\include\uniforms.h"

uniform vec4 vAngle;

in  vec2 Vertex;
out vec3 vViewWS;
out vec3 vNormalWS;
out vec3 vRayleighColor;
out vec3 vMieColor;

#include "planet\include\anglescale.h"

void main()
{
#include "planet\include\getplanetvertex.h"
#include "planet\include\getray.h"

 vNormalWS = normalize(vVertex.xyz);

 float fCamHeight2 = length(vCamera);
 fCamHeight2      *= fCamHeight2;

 float C     = fCamHeight2 - vRadius.w;
 float B     = 2.0 * dot(vCamera, v3Ray);
 float fDet  = max(0.0, B*B - 4.0 * C);
 float fNear = 0.5 * (-B - sqrt(fDet));
 fFar       -= fNear;

 vec3 v3Start        = vCamera + v3Ray * fNear;
 float fDepth        = exp((vRadius.x - vRadius.z)  / vScale.y);
 float fCameraAngle  = dot(-v3Ray, vNormalWS);
 float fLightAngle   = dot(vPrimaryLight, vNormalWS);
 float fCameraScale  = scale(fCameraAngle);
 float fLightScale   = scale(fLightAngle);
 float fCameraOffset = fDepth * fCameraScale;
 float fTemp         = fLightScale + fCameraScale;
 float fSamples      = fPlanetSamples;

#include "planet\include\getsamplepoint.h"
#include "planet\include\planetintegration.h"

 gl_Position = mModelViewProjection * vVertex;
}
